# -*- coding: utf-8 -*-
"""BART_fineTuning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KocdZAPRVfhPrP3qg0OesjuDHlLc35KS
"""

# !nvidia-smi

# Importing stock libraries
import numpy as np
import pandas as pd
import torch
import csv
#import tensorflow_datasets as tfds


# !pip install datasets
import datasets
from datasets import load_dataset

# raw_datasets = load_dataset("imdb")
dataset = load_dataset('csv',data_files={'train':'train.csv',
                                         'test':'test.csv',})
## 'validation':'CNN_data_validation.csv'})

dataset

# len(dataset['train'])
dataset['train'][0]['Text']

import re
for i in range(len(dataset['train'])):
    tweet = re.sub(r'https?:\/\/(www\.)?[-a-zA-Z0–9@:%.\+#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0–9@:%\+.#?&//=]*)', '', dataset['train'][i]['Text'], flags=re.MULTILINE) # to remove links that start with HTTP/HTTPS in the tweet
    tweet = re.sub(r'http\S+', '', tweet,flags=re.MULTILINE)
    tweet = re.sub(r'[-a-zA-Z0–9@:%.\+#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0–9@:%\+.#?&//=]*)', '', tweet, flags=re.MULTILINE) # to remove other url links

    emoji_pattern = re.compile("["
        u"\U0001F600-\U0001F64F"  # emoticons
        u"\U0001F300-\U0001F5FF"  # symbols & pictographs
        u"\U0001F680-\U0001F6FF"  # transport & map symbols
        u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                           "]+", flags=re.UNICODE)
    emoji_pattern.sub(r'', tweet)
    # tweet = ' '.join(re.sub('/[\u{1F600}-\u{1F6FF}]/'," ",tweet).split()) # for emojis

    tweet = re.sub(r"#(\w+)", ' ', tweet, flags=re.MULTILINE)
    tweet = re.sub(r"@(\w+)", ' ', tweet, flags=re.MULTILINE)
    dataset['train'][i]['Text'] = tweet

# !pip install transformers
import transformers
from transformers import AutoTokenizer

model_checkpoint = 'facebook/bart-large-cnn'
# model_checkpoint = 't5-small'
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)

from datasets import load_dataset, load_metric

metric = load_metric("rouge")

max_input_length = 1024
max_target_length = 1000

def preprocess_function(examples):
  inputs = [doc for doc in examples['Text']]
  model_inputs = tokenizer(inputs, max_length=max_input_length,truncation=True, padding="max_length")

  #Setup the tokenizer for targets
  with tokenizer.as_target_tokenizer():
    labels = tokenizer(examples['Summary'],max_length=max_target_length,truncation=True, padding="do_not_pad")
  
  model_inputs["labels"] = labels["input_ids"]
  return model_inputs

tokenized_datasets = dataset.map(preprocess_function, batched=True)

"""Fine Tuning the model"""

from transformers import AutoModelForSeq2SeqLM, DataCollatorForSeq2Seq, Seq2SeqTrainingArguments, Seq2SeqTrainer

model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)

batch_size =7 
model_name = model_checkpoint.split("/")[-1]
args = Seq2SeqTrainingArguments(
    f"facebook/bart-large-cnn-finetuned",
    evaluation_strategy = "epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=1,
    eval_steps=1,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=1,
    predict_with_generate=True,
    fp16=True,
    push_to_hub=False,
)

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)

import nltk
import numpy as np

def compute_metrics(eval_pred):
    predictions, labels = eval_pred
    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)
    # Replace -100 in the labels as we can't decode them.
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)
    
    # Rouge expects a newline after each sentence
    decoded_preds = ["\n".join(nltk.sent_tokenize(pred.strip())) for pred in decoded_preds]
    decoded_labels = ["\n".join(nltk.sent_tokenize(label.strip())) for label in decoded_labels]
    
    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)
    # Extract a few results
    result = {key: value.mid.fmeasure * 100 for key, value in result.items()}
    
    # Add mean generated length
    prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in predictions]
    result["gen_len"] = np.mean(prediction_lens)
    
    return {k: round(v, 4) for k, v in result.items()}

trainer = Seq2SeqTrainer(
    model,
    args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["test"],
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics
)

import nltk
nltk.download('punkt')

trainer.train()

trainer.save_model()
